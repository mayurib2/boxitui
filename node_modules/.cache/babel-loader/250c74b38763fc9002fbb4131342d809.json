{"ast":null,"code":"import { CognitoAuth } from 'amazon-cognito-auth-js/dist/amazon-cognito-auth';\nimport { CognitoUserPool } from 'amazon-cognito-identity-js';\nimport { config as AWSConfig } from 'aws-sdk';\nimport appConfig from '../config/app-config.json';\nAWSConfig.region = appConfig.region; // Creates a CognitoAuth instance\n\nconst createCognitoAuth = () => {\n  console.log(\"******* Inside CognitoUtils running createCognitoAuth\");\n  const appWebDomain = appConfig.userPoolBaseUri.replace('https://', '').replace('http://', '');\n  const auth = new CognitoAuth({\n    UserPoolId: appConfig.userPool,\n    ClientId: appConfig.clientId,\n    AppWebDomain: appWebDomain,\n    TokenScopesArray: appConfig.tokenScopes,\n    RedirectUriSignIn: appConfig.callbackUri,\n    RedirectUriSignOut: appConfig.signoutUri\n  });\n  console.log(\"******* Inside CognitoUtils auth = \", JSON.stringify(auth));\n  return auth;\n}; // Creates a CognitoUser instance\n\n\nconst createCognitoUser = () => {\n  console.log(\"******* Inside CognitoUtils running createCognitoUser\");\n  const pool = createCognitoUserPool();\n  console.log(\"******* Inside CognitoUtils pool.getCurrentUser() = \", pool.getCurrentUser());\n  return pool.getCurrentUser();\n}; // Creates a CognitoUserPool instance\n\n\nconst createCognitoUserPool = () => new CognitoUserPool({\n  UserPoolId: appConfig.userPool,\n  ClientId: appConfig.clientId\n}); // Get the URI of the hosted sign in screen\n\n\nconst getCognitoSignInUri = () => {\n  const signinUri = \"\".concat(appConfig.userPoolBaseUri, \"/login?response_type=code&client_id=\").concat(appConfig.clientId, \"&redirect_uri=\").concat(appConfig.callbackUri);\n  console.log(\"******* Inside CognitoUtils getCognitoSignInUri returning signinUri = \", signinUri);\n  return signinUri;\n}; // Parse the response from a Cognito callback URI (assumed a token or code is in the supplied href). Returns a promise.\n\n\nconst parseCognitoWebResponse = href => {\n  return new Promise((resolve, reject) => {\n    const auth = createCognitoAuth(); // userHandler will trigger the promise\n\n    auth.userhandler = {\n      onSuccess: function (result) {\n        resolve(result);\n      },\n      onFailure: function (err) {\n        reject(new Error('Failure parsing Cognito web response: ' + err));\n      }\n    };\n    auth.parseCognitoWebResponse(href);\n  });\n}; // Gets a new Cognito session. Returns a promise.\n\n\nconst getCognitoSession = () => {\n  return new Promise((resolve, reject) => {\n    const cognitoUser = createCognitoUser();\n    cognitoUser.getSession((err, result) => {\n      if (err || !result) {\n        reject(new Error('Failure getting Cognito session: ' + err));\n        return;\n      } // Resolve the promise with the session credentials\n\n\n      console.debug('Successfully got session: ' + JSON.stringify(result));\n      const session = {\n        credentials: {\n          accessToken: result.accessToken.jwtToken,\n          idToken: result.idToken.jwtToken,\n          refreshToken: result.refreshToken.token\n        },\n        user: {\n          userName: result.idToken.payload['cognito:username'],\n          email: result.idToken.payload.email\n        }\n      };\n      resolve(session);\n    });\n  });\n}; // Sign out of the current session (will redirect to signout URI)\n\n\nconst signOutCognitoSession = () => {\n  const auth = createCognitoAuth();\n  auth.signOut();\n};\n\nexport default {\n  createCognitoAuth,\n  createCognitoUser,\n  createCognitoUserPool,\n  getCognitoSession,\n  getCognitoSignInUri,\n  parseCognitoWebResponse,\n  signOutCognitoSession\n};","map":{"version":3,"sources":["/Users/rkarnik/Documents/personal/mayuri_code/boxitui/src/lib/cognitoUtils.js"],"names":["CognitoAuth","CognitoUserPool","config","AWSConfig","appConfig","region","createCognitoAuth","console","log","appWebDomain","userPoolBaseUri","replace","auth","UserPoolId","userPool","ClientId","clientId","AppWebDomain","TokenScopesArray","tokenScopes","RedirectUriSignIn","callbackUri","RedirectUriSignOut","signoutUri","JSON","stringify","createCognitoUser","pool","createCognitoUserPool","getCurrentUser","getCognitoSignInUri","signinUri","parseCognitoWebResponse","href","Promise","resolve","reject","userhandler","onSuccess","result","onFailure","err","Error","getCognitoSession","cognitoUser","getSession","debug","session","credentials","accessToken","jwtToken","idToken","refreshToken","token","user","userName","payload","email","signOutCognitoSession","signOut"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iDAA5B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,SAApC;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AAEAD,SAAS,CAACE,MAAV,GAAmBD,SAAS,CAACC,MAA7B,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,MAAM;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ;AACA,QAAMC,YAAY,GAAGL,SAAS,CAACM,eAAV,CAA0BC,OAA1B,CAAkC,UAAlC,EAA8C,EAA9C,EAAkDA,OAAlD,CAA0D,SAA1D,EAAqE,EAArE,CAArB;AACA,QAAMC,IAAI,GAAG,IAAIZ,WAAJ,CAAgB;AAC3Ba,IAAAA,UAAU,EAAET,SAAS,CAACU,QADK;AAE3BC,IAAAA,QAAQ,EAAEX,SAAS,CAACY,QAFO;AAG3BC,IAAAA,YAAY,EAAER,YAHa;AAI3BS,IAAAA,gBAAgB,EAAEd,SAAS,CAACe,WAJD;AAK3BC,IAAAA,iBAAiB,EAAEhB,SAAS,CAACiB,WALF;AAM3BC,IAAAA,kBAAkB,EAAElB,SAAS,CAACmB;AANH,GAAhB,CAAb;AAQAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAkDgB,IAAI,CAACC,SAAL,CAAeb,IAAf,CAAlD;AACA,SAAOA,IAAP;AACD,CAbD,C,CAeA;;;AACA,MAAMc,iBAAiB,GAAG,MAAM;AAC9BnB,EAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ;AACA,QAAMmB,IAAI,GAAGC,qBAAqB,EAAlC;AACArB,EAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ,EAAmEmB,IAAI,CAACE,cAAL,EAAnE;AACA,SAAOF,IAAI,CAACE,cAAL,EAAP;AACD,CALD,C,CAOA;;;AACA,MAAMD,qBAAqB,GAAG,MAAM,IAAI3B,eAAJ,CAAoB;AACtDY,EAAAA,UAAU,EAAET,SAAS,CAACU,QADgC;AAEtDC,EAAAA,QAAQ,EAAEX,SAAS,CAACY;AAFkC,CAApB,CAApC,C,CAKA;;;AACA,MAAMc,mBAAmB,GAAG,MAAM;AAChC,QAAMC,SAAS,aAAM3B,SAAS,CAACM,eAAhB,iDAAsEN,SAAS,CAACY,QAAhF,2BAAyGZ,SAAS,CAACiB,WAAnH,CAAf;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ,EAAqFuB,SAArF;AACA,SAAOA,SAAP;AACD,CAJD,C,CAMA;;;AACA,MAAMC,uBAAuB,GAAIC,IAAD,IAAU;AACxC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMxB,IAAI,GAAGN,iBAAiB,EAA9B,CADsC,CAGtC;;AACAM,IAAAA,IAAI,CAACyB,WAAL,GAAmB;AACjBC,MAAAA,SAAS,EAAE,UAAUC,MAAV,EAAkB;AAC3BJ,QAAAA,OAAO,CAACI,MAAD,CAAP;AACD,OAHgB;AAIjBC,MAAAA,SAAS,EAAE,UAAUC,GAAV,EAAe;AACxBL,QAAAA,MAAM,CAAC,IAAIM,KAAJ,CAAU,2CAA2CD,GAArD,CAAD,CAAN;AACD;AANgB,KAAnB;AAQA7B,IAAAA,IAAI,CAACoB,uBAAL,CAA6BC,IAA7B;AACD,GAbM,CAAP;AAcD,CAfD,C,CAiBA;;;AACA,MAAMU,iBAAiB,GAAG,MAAM;AAC9B,SAAO,IAAIT,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMQ,WAAW,GAAGlB,iBAAiB,EAArC;AACAkB,IAAAA,WAAW,CAACC,UAAZ,CAAuB,CAACJ,GAAD,EAAMF,MAAN,KAAiB;AACtC,UAAIE,GAAG,IAAI,CAACF,MAAZ,EAAoB;AAClBH,QAAAA,MAAM,CAAC,IAAIM,KAAJ,CAAU,sCAAsCD,GAAhD,CAAD,CAAN;AACA;AACD,OAJqC,CAMtC;;;AACAlC,MAAAA,OAAO,CAACuC,KAAR,CAAc,+BAA+BtB,IAAI,CAACC,SAAL,CAAec,MAAf,CAA7C;AACA,YAAMQ,OAAO,GAAG;AACdC,QAAAA,WAAW,EAAE;AACXC,UAAAA,WAAW,EAAEV,MAAM,CAACU,WAAP,CAAmBC,QADrB;AAEXC,UAAAA,OAAO,EAAEZ,MAAM,CAACY,OAAP,CAAeD,QAFb;AAGXE,UAAAA,YAAY,EAAEb,MAAM,CAACa,YAAP,CAAoBC;AAHvB,SADC;AAMdC,QAAAA,IAAI,EAAE;AACJC,UAAAA,QAAQ,EAAEhB,MAAM,CAACY,OAAP,CAAeK,OAAf,CAAuB,kBAAvB,CADN;AAEJC,UAAAA,KAAK,EAAElB,MAAM,CAACY,OAAP,CAAeK,OAAf,CAAuBC;AAF1B;AANQ,OAAhB;AAWAtB,MAAAA,OAAO,CAACY,OAAD,CAAP;AACD,KApBD;AAqBD,GAvBM,CAAP;AAwBD,CAzBD,C,CA2BA;;;AACA,MAAMW,qBAAqB,GAAG,MAAM;AAClC,QAAM9C,IAAI,GAAGN,iBAAiB,EAA9B;AACAM,EAAAA,IAAI,CAAC+C,OAAL;AACD,CAHD;;AAKA,eAAe;AACbrD,EAAAA,iBADa;AAEboB,EAAAA,iBAFa;AAGbE,EAAAA,qBAHa;AAIbe,EAAAA,iBAJa;AAKbb,EAAAA,mBALa;AAMbE,EAAAA,uBANa;AAOb0B,EAAAA;AAPa,CAAf","sourcesContent":["import { CognitoAuth } from 'amazon-cognito-auth-js/dist/amazon-cognito-auth'\nimport { CognitoUserPool } from 'amazon-cognito-identity-js'\nimport { config as AWSConfig } from 'aws-sdk'\nimport appConfig from '../config/app-config.json'\n\nAWSConfig.region = appConfig.region\n\n// Creates a CognitoAuth instance\nconst createCognitoAuth = () => {\n  console.log(\"******* Inside CognitoUtils running createCognitoAuth\");\n  const appWebDomain = appConfig.userPoolBaseUri.replace('https://', '').replace('http://', '');\n  const auth = new CognitoAuth({\n    UserPoolId: appConfig.userPool,\n    ClientId: appConfig.clientId,\n    AppWebDomain: appWebDomain,\n    TokenScopesArray: appConfig.tokenScopes,\n    RedirectUriSignIn: appConfig.callbackUri,\n    RedirectUriSignOut: appConfig.signoutUri\n  });\n  console.log(\"******* Inside CognitoUtils auth = \",JSON.stringify(auth));\n  return auth;\n}\n\n// Creates a CognitoUser instance\nconst createCognitoUser = () => {\n  console.log(\"******* Inside CognitoUtils running createCognitoUser\");\n  const pool = createCognitoUserPool();\n  console.log(\"******* Inside CognitoUtils pool.getCurrentUser() = \",pool.getCurrentUser());\n  return pool.getCurrentUser();\n}\n\n// Creates a CognitoUserPool instance\nconst createCognitoUserPool = () => new CognitoUserPool({\n  UserPoolId: appConfig.userPool,\n  ClientId: appConfig.clientId\n})\n\n// Get the URI of the hosted sign in screen\nconst getCognitoSignInUri = () => {\n  const signinUri = `${appConfig.userPoolBaseUri}/login?response_type=code&client_id=${appConfig.clientId}&redirect_uri=${appConfig.callbackUri}`\n  console.log(\"******* Inside CognitoUtils getCognitoSignInUri returning signinUri = \",signinUri);\n  return signinUri\n}\n\n// Parse the response from a Cognito callback URI (assumed a token or code is in the supplied href). Returns a promise.\nconst parseCognitoWebResponse = (href) => {\n  return new Promise((resolve, reject) => {\n    const auth = createCognitoAuth();\n\n    // userHandler will trigger the promise\n    auth.userhandler = {\n      onSuccess: function (result) {\n        resolve(result)\n      },\n      onFailure: function (err) {\n        reject(new Error('Failure parsing Cognito web response: ' + err))\n      }\n    }\n    auth.parseCognitoWebResponse(href)\n  })\n}\n\n// Gets a new Cognito session. Returns a promise.\nconst getCognitoSession = () => {\n  return new Promise((resolve, reject) => {\n    const cognitoUser = createCognitoUser()\n    cognitoUser.getSession((err, result) => {\n      if (err || !result) {\n        reject(new Error('Failure getting Cognito session: ' + err))\n        return\n      }\n\n      // Resolve the promise with the session credentials\n      console.debug('Successfully got session: ' + JSON.stringify(result))\n      const session = {\n        credentials: {\n          accessToken: result.accessToken.jwtToken,\n          idToken: result.idToken.jwtToken,\n          refreshToken: result.refreshToken.token\n        },\n        user: {\n          userName: result.idToken.payload['cognito:username'],\n          email: result.idToken.payload.email\n        }\n      }\n      resolve(session)\n    })\n  })\n}\n\n// Sign out of the current session (will redirect to signout URI)\nconst signOutCognitoSession = () => {\n  const auth = createCognitoAuth()\n  auth.signOut()\n}\n\nexport default {\n  createCognitoAuth,\n  createCognitoUser,\n  createCognitoUserPool,\n  getCognitoSession,\n  getCognitoSignInUri,\n  parseCognitoWebResponse,\n  signOutCognitoSession\n}\n"]},"metadata":{},"sourceType":"module"}