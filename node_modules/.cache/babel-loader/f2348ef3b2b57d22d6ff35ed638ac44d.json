{"ast":null,"code":"/*!\n * Copyright 2017 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n * \n *      http://aws.amazon.com/apache2.0/\n * \n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License. \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"AmazonCognitoIdentity\"] = factory();else root[\"AmazonCognitoIdentity\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _src = __webpack_require__(12);\n\n      Object.keys(_src).forEach(function (key) {\n        if (key === \"default\" || key === \"__esModule\") return;\n        Object.defineProperty(exports, key, {\n          enumerable: true,\n          get: function get() {\n            return _src[key];\n          }\n        });\n      });\n\n      var enhancements = _interopRequireWildcard(_src);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj.default = obj;\n          return newObj;\n        }\n      } // The version of crypto-browserify included by aws-sdk only\n      // checks for window.crypto, not window.msCrypto as used by\n      // IE 11 â€“ so we set it explicitly here\n\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      \t * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n\n      if (typeof window !== 'undefined' && !window.crypto && window.msCrypto) {\n        window.crypto = window.msCrypto;\n      }\n      /***/\n\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      \n       * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n\n      var _DecodingHelper = __webpack_require__(6);\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /** @class */\n\n\n      var CognitoAccessToken = function () {\n        /**\n         * Constructs a new CognitoAccessToken object\n         * @param {string=} AccessToken The JWT access token.\n         */\n        function CognitoAccessToken(AccessToken) {\n          _classCallCheck(this, CognitoAccessToken); // Assign object\n\n\n          this.jwtToken = AccessToken || '';\n          this.payload = this.decodePayload();\n        }\n        /**\n         * @returns {string} the record's token.\n         */\n\n\n        _createClass(CognitoAccessToken, [{\n          key: 'getJwtToken',\n          value: function getJwtToken() {\n            return this.jwtToken;\n          }\n          /**\n           * Sets new value for access token.\n           * @param {string=} accessToken The JWT access token.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setJwtToken',\n          value: function setJwtToken(accessToken) {\n            this.jwtToken = accessToken;\n          }\n          /**\n           * @returns {int} the token's expiration (exp member).\n           */\n\n        }, {\n          key: 'getExpiration',\n          value: function getExpiration() {\n            if (this.jwtToken === null) {\n              return undefined;\n            }\n\n            var jwtPayload = this.jwtToken.split('.')[1];\n            return JSON.parse((0, _DecodingHelper.decode)(jwtPayload)).exp;\n          }\n          /**\n           * @returns {string} the username from payload.\n           */\n\n        }, {\n          key: 'getUsername',\n          value: function getUsername() {\n            if (this.jwtToken === null) {\n              return undefined;\n            }\n\n            var jwtPayload = this.jwtToken.split('.')[1];\n            return JSON.parse((0, _DecodingHelper.decode)(jwtPayload)).username;\n          }\n          /**\n           * @returns {object} the token's payload.\n           */\n\n        }, {\n          key: 'decodePayload',\n          value: function decodePayload() {\n            var jwtPayload = this.jwtToken.split('.')[1];\n\n            try {\n              return JSON.parse((0, _DecodingHelper.decode)(jwtPayload));\n            } catch (err) {\n              return {};\n            }\n          }\n        }]);\n\n        return CognitoAccessToken;\n      }();\n\n      exports.default = CognitoAccessToken;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n       * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n\n      var _DecodingHelper = __webpack_require__(6);\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /** @class */\n\n\n      var CognitoIdToken = function () {\n        /**\n         * Constructs a new CognitoIdToken object\n         * @param {string=} IdToken The JWT Id token\n         */\n        function CognitoIdToken(IdToken) {\n          _classCallCheck(this, CognitoIdToken); // Assign object\n\n\n          this.jwtToken = IdToken || '';\n          this.payload = this.decodePayload();\n        }\n        /**\n         * @returns {string} the record's token.\n         */\n\n\n        _createClass(CognitoIdToken, [{\n          key: 'getJwtToken',\n          value: function getJwtToken() {\n            return this.jwtToken;\n          }\n          /**\n           * Sets new value for id token.\n           * @param {string=} idToken The JWT Id token\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setJwtToken',\n          value: function setJwtToken(idToken) {\n            this.jwtToken = idToken;\n          }\n          /**\n           * @returns {int} the token's expiration (exp member).\n           */\n\n        }, {\n          key: 'getExpiration',\n          value: function getExpiration() {\n            if (this.jwtToken === null) {\n              return undefined;\n            }\n\n            var jwtPayload = this.jwtToken.split('.')[1];\n            return JSON.parse((0, _DecodingHelper.decode)(jwtPayload)).exp;\n          }\n          /**\n           * @returns {object} the token's payload.\n           */\n\n        }, {\n          key: 'decodePayload',\n          value: function decodePayload() {\n            var jwtPayload = this.jwtToken.split('.')[1];\n\n            try {\n              return JSON.parse((0, _DecodingHelper.decode)(jwtPayload));\n            } catch (err) {\n              return {};\n            }\n          }\n        }]);\n\n        return CognitoIdToken;\n      }();\n\n      exports.default = CognitoIdToken;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      \t * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n      /** @class */\n\n\n      var CognitoRefreshToken = function () {\n        /**\n         * Constructs a new CognitoRefreshToken object\n         * @param {string=} RefreshToken The JWT refresh token.\n         */\n        function CognitoRefreshToken(RefreshToken) {\n          _classCallCheck(this, CognitoRefreshToken); // Assign object\n\n\n          this.refreshToken = RefreshToken || '';\n        }\n        /**\n         * @returns {string} the record's token.\n         */\n\n\n        _createClass(CognitoRefreshToken, [{\n          key: 'getToken',\n          value: function getToken() {\n            return this.refreshToken;\n          }\n          /**\n           * Sets new value for refresh token.\n           * @param {string=} refreshToken The JWT refresh token.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setToken',\n          value: function setToken(refreshToken) {\n            this.refreshToken = refreshToken;\n          }\n        }]);\n\n        return CognitoRefreshToken;\n      }();\n\n      exports.default = CognitoRefreshToken;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      \t * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n      /** @class */\n\n\n      var CognitoTokenScopes = function () {\n        /**\n         * Constructs a new CognitoTokenScopes object\n         * @param {array=} TokenScopesArray The token scopes\n         */\n        function CognitoTokenScopes(TokenScopesArray) {\n          _classCallCheck(this, CognitoTokenScopes); // Assign object\n\n\n          this.tokenScopes = TokenScopesArray || [];\n        }\n        /**\n         * @returns {Array} the token scopes.\n         */\n\n\n        _createClass(CognitoTokenScopes, [{\n          key: \"getScopes\",\n          value: function getScopes() {\n            return this.tokenScopes;\n          }\n          /**\n           * Sets new value for token scopes.\n           * @param {array=} tokenScopes The token scopes\n           * @returns {void}\n           */\n\n        }, {\n          key: \"setTokenScopes\",\n          value: function setTokenScopes(tokenScopes) {\n            this.tokenScopes = tokenScopes;\n          }\n        }]);\n\n        return CognitoTokenScopes;\n      }();\n\n      exports.default = CognitoTokenScopes;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      \n       * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n\n      var _CognitoTokenScopes = __webpack_require__(4);\n\n      var _CognitoTokenScopes2 = _interopRequireDefault(_CognitoTokenScopes);\n\n      var _CognitoAccessToken = __webpack_require__(1);\n\n      var _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\n      var _CognitoIdToken = __webpack_require__(2);\n\n      var _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\n      var _CognitoRefreshToken = __webpack_require__(3);\n\n      var _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /** @class */\n\n\n      var CognitoAuthSession = function () {\n        /**\n         * Constructs a new CognitoUserSession object\n         * @param {CognitoIdToken} IdToken The session's Id token.\n         * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n         * @param {CognitoAccessToken} AccessToken The session's access token.\n         * @param {array}  TokenScopes  The session's token scopes.\n          * @param {string} State The session's state. \n         */\n        function CognitoAuthSession() {\n          var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n              IdToken = _ref.IdToken,\n              RefreshToken = _ref.RefreshToken,\n              AccessToken = _ref.AccessToken,\n              TokenScopes = _ref.TokenScopes,\n              State = _ref.State;\n\n          _classCallCheck(this, CognitoAuthSession);\n\n          if (IdToken) {\n            this.idToken = IdToken;\n          } else {\n            this.idToken = new _CognitoIdToken2.default();\n          }\n\n          if (RefreshToken) {\n            this.refreshToken = RefreshToken;\n          } else {\n            this.refreshToken = new _CognitoRefreshToken2.default();\n          }\n\n          if (AccessToken) {\n            this.accessToken = AccessToken;\n          } else {\n            this.accessToken = new _CognitoAccessToken2.default();\n          }\n\n          if (TokenScopes) {\n            this.tokenScopes = TokenScopes;\n          } else {\n            this.tokenScopes = new _CognitoTokenScopes2.default();\n          }\n\n          if (State) {\n            this.state = State;\n          } else {\n            this.state = null;\n          }\n        }\n        /**\n         * @returns {CognitoIdToken} the session's Id token\n         */\n\n\n        _createClass(CognitoAuthSession, [{\n          key: 'getIdToken',\n          value: function getIdToken() {\n            return this.idToken;\n          }\n          /**\n           * Set a new Id token\n           * @param {CognitoIdToken} IdToken The session's Id token.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setIdToken',\n          value: function setIdToken(IdToken) {\n            this.idToken = IdToken;\n          }\n          /**\n           * @returns {CognitoRefreshToken} the session's refresh token\n           */\n\n        }, {\n          key: 'getRefreshToken',\n          value: function getRefreshToken() {\n            return this.refreshToken;\n          }\n          /**\n           * Set a new Refresh token\n           * @param {CognitoRefreshToken} RefreshToken The session's refresh token.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setRefreshToken',\n          value: function setRefreshToken(RefreshToken) {\n            this.refreshToken = RefreshToken;\n          }\n          /**\n           * @returns {CognitoAccessToken} the session's access token\n           */\n\n        }, {\n          key: 'getAccessToken',\n          value: function getAccessToken() {\n            return this.accessToken;\n          }\n          /**\n           * Set a new Access token\n           * @param {CognitoAccessToken} AccessToken The session's access token.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setAccessToken',\n          value: function setAccessToken(AccessToken) {\n            this.accessToken = AccessToken;\n          }\n          /**\n           * @returns {CognitoTokenScopes} the session's token scopes\n           */\n\n        }, {\n          key: 'getTokenScopes',\n          value: function getTokenScopes() {\n            return this.tokenScopes;\n          }\n          /**\n           * Set new token scopes\n           * @param {array}  tokenScopes  The session's token scopes.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setTokenScopes',\n          value: function setTokenScopes(tokenScopes) {\n            this.tokenScopes = tokenScopes;\n          }\n          /**\n           * @returns {string} the session's state\n           */\n\n        }, {\n          key: 'getState',\n          value: function getState() {\n            return this.state;\n          }\n          /**\n           * Set new state\n           * @param {string}  state  The session's state.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setState',\n          value: function setState(State) {\n            this.state = State;\n          }\n          /**\n           * Checks to see if the session is still valid based on session expiry information found\n           * in Access and Id Tokens and the current time\n           * @returns {boolean} if the session is still valid\n           */\n\n        }, {\n          key: 'isValid',\n          value: function isValid() {\n            var now = Math.floor(new Date() / 1000);\n\n            try {\n              if (this.accessToken != null) {\n                return now < this.accessToken.getExpiration();\n              }\n\n              if (this.idToken != null) {\n                return now < this.idToken.getExpiration();\n              }\n\n              return false;\n            } catch (e) {\n              return false;\n            }\n          }\n        }]);\n\n        return CognitoAuthSession;\n      }();\n\n      exports.default = CognitoAuthSession;\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      /* WEBPACK VAR INJECTION */\n      (function (global) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var decode = exports.decode = function decode(str) {\n          return global.atob(str);\n        };\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, function () {\n        return this;\n      }());\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      \t * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n\n      var dataMemory = {};\n      /** @class */\n\n      var MemoryStorage = function () {\n        function MemoryStorage() {\n          _classCallCheck(this, MemoryStorage);\n        }\n\n        _createClass(MemoryStorage, null, [{\n          key: 'setItem',\n\n          /**\n           * This is used to set a specific item in storage\n           * @param {string} key - the key for the item\n           * @param {object} value - the value\n           * @returns {string} value that was set\n           */\n          value: function setItem(key, value) {\n            dataMemory[key] = value;\n            return dataMemory[key];\n          }\n          /**\n           * This is used to get a specific key from storage\n           * @param {string} key - the key for the item\n           * This is used to clear the storage\n           * @returns {string} the data item\n           */\n\n        }, {\n          key: 'getItem',\n          value: function getItem(key) {\n            return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n          }\n          /**\n           * This is used to remove an item from storage\n           * @param {string} key - the key being set\n           * @returns {string} value - value that was deleted\n           */\n\n        }, {\n          key: 'removeItem',\n          value: function removeItem(key) {\n            return delete dataMemory[key];\n          }\n          /**\n           * This is used to clear the storage\n           * @returns {string} nothing\n           */\n\n        }, {\n          key: 'clear',\n          value: function clear() {\n            dataMemory = {};\n            return dataMemory;\n          }\n        }]);\n\n        return MemoryStorage;\n      }();\n      /** @class */\n\n\n      var StorageHelper = function () {\n        /**\n         * This is used to get a storage object\n         * @returns {object} the storage\n         */\n        function StorageHelper() {\n          _classCallCheck(this, StorageHelper);\n\n          try {\n            this.storageWindow = window.localStorage;\n            this.storageWindow.setItem('aws.cognito.test-ls', 1);\n            this.storageWindow.removeItem('aws.cognito.test-ls');\n          } catch (exception) {\n            this.storageWindow = MemoryStorage;\n          }\n        }\n        /**\n         * This is used to return the storage\n         * @returns {object} the storage\n         */\n\n\n        _createClass(StorageHelper, [{\n          key: 'getStorage',\n          value: function getStorage() {\n            return this.storageWindow;\n          }\n        }]);\n\n        return StorageHelper;\n      }();\n\n      exports.default = StorageHelper;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n      /*!\n        * Amazon Cognito Auth SDK for JavaScript\n        * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n        *\n        * Licensed under the Apache License, Version 2.0 (the \"License\").\n        * You may not use this file except in compliance with the License.\n        * A copy of the License is located at\n        *\n        *         http://aws.amazon.com/apache2.0/\n        *\n        * or in the \"license\" file accompanying this file.\n        * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n        * OR CONDITIONS OF ANY KIND, either express or implied. See the\n        * License for the specific language governing permissions\n        * and limitations under the License.\n        */\n\n\n      var _CognitoTokenScopes = __webpack_require__(4);\n\n      var _CognitoTokenScopes2 = _interopRequireDefault(_CognitoTokenScopes);\n\n      var _CognitoAccessToken = __webpack_require__(1);\n\n      var _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\n      var _CognitoIdToken = __webpack_require__(2);\n\n      var _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\n      var _CognitoRefreshToken = __webpack_require__(3);\n\n      var _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\n      var _CognitoAuthSession = __webpack_require__(5);\n\n      var _CognitoAuthSession2 = _interopRequireDefault(_CognitoAuthSession);\n\n      var _StorageHelper = __webpack_require__(7);\n\n      var _StorageHelper2 = _interopRequireDefault(_StorageHelper);\n\n      var _UriHelper = __webpack_require__(11);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /** @class */\n\n\n      var CognitoAuth = function () {\n        /**\n         * Constructs a new CognitoAuth object\n         * @param {object} data Creation options\n         * @param {string} data.ClientId Required: User pool application client id.\n         * @param {string} data.AppWebDomain Required: The application/user-pools Cognito web hostname,\n         *                     this is set at the Cognito console.\n         * @param {array} data.TokenScopesArray Optional: The token scopes\n         * @param {string} data.RedirectUriSignIn Required: The redirect Uri,\n         * which will be launched after authentication as signed in.\n         * @param {string} data.RedirectUriSignOut Required:\n         * The redirect Uri, which will be launched when signed out.\n         * @param {string} data.IdentityProvider Optional: Pre-selected identity provider (this allows to\n         * automatically trigger social provider authentication flow).\n         * @param {string} data.UserPoolId Optional: UserPoolId for the configured cognito userPool.\n         * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional: boolean flag indicating if the\n         *        data collection is enabled to support cognito advanced security features. By default, this\n         *        flag is set to true.\n         * @param {object} data.Storage Optional: e.g. new CookieStorage(), to use the specified storage provided\n         * @param {function} data.LaunchUri Optional: Function to open a url, by default uses window.open in browser, Linking.openUrl in React Native\n         * @param {nodeCallback<CognitoAuthSession>} Optional: userhandler Called on success or error.\n         */\n        function CognitoAuth(data) {\n          _classCallCheck(this, CognitoAuth);\n\n          var _ref = data || {},\n              ClientId = _ref.ClientId,\n              AppWebDomain = _ref.AppWebDomain,\n              TokenScopesArray = _ref.TokenScopesArray,\n              RedirectUriSignIn = _ref.RedirectUriSignIn,\n              RedirectUriSignOut = _ref.RedirectUriSignOut,\n              IdentityProvider = _ref.IdentityProvider,\n              UserPoolId = _ref.UserPoolId,\n              AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag,\n              Storage = _ref.Storage,\n              LaunchUri = _ref.LaunchUri;\n\n          if (data == null || !ClientId || !AppWebDomain || !RedirectUriSignIn || !RedirectUriSignOut) {\n            throw new Error(this.getCognitoConstants().PARAMETERERROR);\n          }\n\n          this.clientId = ClientId;\n          this.appWebDomain = AppWebDomain;\n          this.TokenScopesArray = TokenScopesArray || [];\n\n          if (!Array.isArray(TokenScopesArray)) {\n            throw new Error(this.getCognitoConstants().SCOPETYPEERROR);\n          }\n\n          var tokenScopes = new _CognitoTokenScopes2.default(this.TokenScopesArray);\n          this.RedirectUriSignIn = RedirectUriSignIn;\n          this.RedirectUriSignOut = RedirectUriSignOut;\n          this.IdentityProvider = IdentityProvider;\n          this.responseType = this.getCognitoConstants().TOKEN;\n          this.storage = Storage || new _StorageHelper2.default().getStorage();\n          this.username = this.getLastUser();\n          this.userPoolId = UserPoolId;\n          this.signInUserSession = this.getCachedSession();\n          this.signInUserSession.setTokenScopes(tokenScopes);\n          this.launchUri = typeof LaunchUri === 'function' ? LaunchUri : _UriHelper.launchUri;\n          /**\n           * By default, AdvancedSecurityDataCollectionFlag is set to true, if no input value is provided.\n           */\n\n          this.advancedSecurityDataCollectionFlag = true;\n\n          if (AdvancedSecurityDataCollectionFlag) {\n            this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag;\n          }\n        }\n        /**\n         * @returns {JSON} the constants\n         */\n\n\n        _createClass(CognitoAuth, [{\n          key: 'getCognitoConstants',\n          value: function getCognitoConstants() {\n            var CognitoConstants = {\n              DOMAIN_SCHEME: 'https',\n              DOMAIN_PATH_SIGNIN: 'oauth2/authorize',\n              DOMAIN_PATH_TOKEN: 'oauth2/token',\n              DOMAIN_PATH_SIGNOUT: 'logout',\n              DOMAIN_QUERY_PARAM_REDIRECT_URI: 'redirect_uri',\n              DOMAIN_QUERY_PARAM_SIGNOUT_URI: 'logout_uri',\n              DOMAIN_QUERY_PARAM_RESPONSE_TYPE: 'response_type',\n              DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER: 'identity_provider',\n              DOMAIN_QUERY_PARAM_USERCONTEXTDATA: 'userContextData',\n              CLIENT_ID: 'client_id',\n              STATE: 'state',\n              SCOPE: 'scope',\n              TOKEN: 'token',\n              CODE: 'code',\n              POST: 'POST',\n              PARAMETERERROR: 'The parameters: App client Id, App web domain' + ', the redirect URL when you are signed in and the ' + 'redirect URL when you are signed out are required.',\n              SCOPETYPEERROR: 'Scopes have to be array type. ',\n              QUESTIONMARK: '?',\n              POUNDSIGN: '#',\n              COLONDOUBLESLASH: '://',\n              SLASH: '/',\n              AMPERSAND: '&',\n              EQUALSIGN: '=',\n              SPACE: ' ',\n              CONTENTTYPE: 'Content-Type',\n              CONTENTTYPEVALUE: 'application/x-www-form-urlencoded',\n              AUTHORIZATIONCODE: 'authorization_code',\n              IDTOKEN: 'id_token',\n              ACCESSTOKEN: 'access_token',\n              REFRESHTOKEN: 'refresh_token',\n              ERROR: 'error',\n              ERROR_DESCRIPTION: 'error_description',\n              STRINGTYPE: 'string',\n              STATELENGTH: 32,\n              STATEORIGINSTRING: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n              WITHCREDENTIALS: 'withCredentials',\n              UNDEFINED: 'undefined',\n              HOSTNAMEREGEX: /:\\/\\/([0-9]?\\.)?(.[^/:]+)/i,\n              QUERYPARAMETERREGEX1: /#(.+)/,\n              QUERYPARAMETERREGEX2: /=(.+)/,\n              HEADER: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            };\n            return CognitoConstants;\n          }\n          /**\n           * @returns {string} the client id\n           */\n\n        }, {\n          key: 'getClientId',\n          value: function getClientId() {\n            return this.clientId;\n          }\n          /**\n           * @returns {string} the app web domain\n           */\n\n        }, {\n          key: 'getAppWebDomain',\n          value: function getAppWebDomain() {\n            return this.appWebDomain;\n          }\n          /**\n           * method for getting the current user of the application from the local storage\n           *\n           * @returns {CognitoAuth} the user retrieved from storage\n           */\n\n        }, {\n          key: 'getCurrentUser',\n          value: function getCurrentUser() {\n            var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n            var lastAuthUser = this.storage.getItem(lastUserKey);\n            return lastAuthUser;\n          }\n          /**\n           * @param {string} Username the user's name\n           * method for setting the current user's name\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setUser',\n          value: function setUser(Username) {\n            this.username = Username;\n          }\n          /**\n           * sets response type to 'code'\n           * @returns {void}\n           */\n\n        }, {\n          key: 'useCodeGrantFlow',\n          value: function useCodeGrantFlow() {\n            this.responseType = this.getCognitoConstants().CODE;\n          }\n          /**\n           * sets response type to 'token'\n           * @returns {void}\n           */\n\n        }, {\n          key: 'useImplicitFlow',\n          value: function useImplicitFlow() {\n            this.responseType = this.getCognitoConstants().TOKEN;\n          }\n          /**\n           * @returns {CognitoAuthSession} the current session for this user\n           */\n\n        }, {\n          key: 'getSignInUserSession',\n          value: function getSignInUserSession() {\n            return this.signInUserSession;\n          }\n          /**\n           * @returns {string} the user's username\n           */\n\n        }, {\n          key: 'getUsername',\n          value: function getUsername() {\n            return this.username;\n          }\n          /**\n           * @param {string} Username the user's username\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setUsername',\n          value: function setUsername(Username) {\n            this.username = Username;\n          }\n          /**\n           * @returns {string} the user's state\n           */\n\n        }, {\n          key: 'getState',\n          value: function getState() {\n            return this.state;\n          }\n          /**\n           * @param {string} State the user's state\n           * @returns {void}\n           */\n\n        }, {\n          key: 'setState',\n          value: function setState(State) {\n            this.state = State;\n          }\n          /**\n           * This is used to get a session, either from the session object\n           * or from the local storage, or by using a refresh token\n           * @param {string} RedirectUriSignIn Required: The redirect Uri,\n           * which will be launched after authentication.\n           * @param {array} TokenScopesArray Required: The token scopes, it is an\n           * array of strings specifying all scopes for the tokens.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'getSession',\n          value: function getSession() {\n            var tokenScopesInputSet = new Set(this.TokenScopesArray);\n            var cachedScopesSet = new Set(this.signInUserSession.tokenScopes.getScopes());\n            var URL = this.getFQDNSignIn();\n\n            if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n              return this.userhandler.onSuccess(this.signInUserSession);\n            }\n\n            this.signInUserSession = this.getCachedSession(); // compare scopes\n\n            if (!this.compareSets(tokenScopesInputSet, cachedScopesSet)) {\n              var tokenScopes = new _CognitoTokenScopes2.default(this.TokenScopesArray);\n              var idToken = new _CognitoIdToken2.default();\n              var accessToken = new _CognitoAccessToken2.default();\n              var refreshToken = new _CognitoRefreshToken2.default();\n              this.signInUserSession.setTokenScopes(tokenScopes);\n              this.signInUserSession.setIdToken(idToken);\n              this.signInUserSession.setAccessToken(accessToken);\n              this.signInUserSession.setRefreshToken(refreshToken);\n              this.launchUri(URL);\n            } else if (this.signInUserSession.isValid()) {\n              return this.userhandler.onSuccess(this.signInUserSession);\n            } else if (!this.signInUserSession.getRefreshToken() || !this.signInUserSession.getRefreshToken().getToken()) {\n              this.launchUri(URL);\n            } else {\n              this.refreshSession(this.signInUserSession.getRefreshToken().getToken());\n            }\n\n            return undefined;\n          }\n          /**\n           * @param {string} httpRequestResponse the http request response\n           * @returns {void}\n           * Parse the http request response and proceed according to different response types.\n           */\n\n        }, {\n          key: 'parseCognitoWebResponse',\n          value: function parseCognitoWebResponse(httpRequestResponse) {\n            var map = void 0;\n\n            if (httpRequestResponse.indexOf(this.getCognitoConstants().QUESTIONMARK) > -1) {\n              // for code type\n              // this is to avoid a bug exists when sign in with Google or facebook\n              // Sometimes the code will contain a poundsign in the end which breaks the parsing\n              var response = httpRequestResponse.split(this.getCognitoConstants().POUNDSIGN)[0];\n              map = this.getQueryParameters(response, this.getCognitoConstants().QUESTIONMARK);\n\n              if (map.has(this.getCognitoConstants().ERROR)) {\n                return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n              }\n\n              this.getCodeQueryParameter(map);\n            } else if (httpRequestResponse.indexOf(this.getCognitoConstants().POUNDSIGN) > -1) {\n              // for token type\n              map = this.getQueryParameters(httpRequestResponse, this.getCognitoConstants().QUERYPARAMETERREGEX1);\n\n              if (map.has(this.getCognitoConstants().ERROR)) {\n                return this.userhandler.onFailure(map.get(this.getCognitoConstants().ERROR_DESCRIPTION));\n              } // To use the map to get tokens\n\n\n              this.getTokenQueryParameter(map);\n            }\n          }\n          /**\n           * @param {map} Query parameter map \n           * @returns {void}\n           * Get the query parameter map and proceed according to code response type.\n           */\n\n        }, {\n          key: 'getCodeQueryParameter',\n          value: function getCodeQueryParameter(map) {\n            var state = null;\n\n            if (map.has(this.getCognitoConstants().STATE)) {\n              this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n            } else {\n              this.signInUserSession.setState(state);\n            }\n\n            if (map.has(this.getCognitoConstants().CODE)) {\n              // if the response contains code\n              // To parse the response and get the code value.\n              var codeParameter = map.get(this.getCognitoConstants().CODE);\n              var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n              var header = this.getCognitoConstants().HEADER;\n              var body = {\n                grant_type: this.getCognitoConstants().AUTHORIZATIONCODE,\n                client_id: this.getClientId(),\n                redirect_uri: this.RedirectUriSignIn,\n                code: codeParameter\n              };\n              var boundOnSuccess = this.onSuccessExchangeForToken.bind(this);\n              var boundOnFailure = this.onFailure.bind(this);\n              this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n            }\n          }\n          /**\n           * Get the query parameter map and proceed according to token response type.\n           * @param {map} Query parameter map \n           * @returns {void}\n           */\n\n        }, {\n          key: 'getTokenQueryParameter',\n          value: function getTokenQueryParameter(map) {\n            var idToken = new _CognitoIdToken2.default();\n            var accessToken = new _CognitoAccessToken2.default();\n            var refreshToken = new _CognitoRefreshToken2.default();\n            var state = null;\n\n            if (map.has(this.getCognitoConstants().IDTOKEN)) {\n              idToken.setJwtToken(map.get(this.getCognitoConstants().IDTOKEN));\n              this.signInUserSession.setIdToken(idToken);\n            } else {\n              this.signInUserSession.setIdToken(idToken);\n            }\n\n            if (map.has(this.getCognitoConstants().ACCESSTOKEN)) {\n              accessToken.setJwtToken(map.get(this.getCognitoConstants().ACCESSTOKEN));\n              this.signInUserSession.setAccessToken(accessToken);\n            } else {\n              this.signInUserSession.setAccessToken(accessToken);\n            }\n\n            if (map.has(this.getCognitoConstants().STATE)) {\n              this.signInUserSession.setState(map.get(this.getCognitoConstants().STATE));\n            } else {\n              this.signInUserSession.setState(state);\n            }\n\n            this.cacheTokensScopes();\n            this.userhandler.onSuccess(this.signInUserSession);\n          }\n          /**\n           * Get cached tokens and scopes and return a new session using all the cached data.\n           * @returns {CognitoAuthSession} the auth session\n           */\n\n        }, {\n          key: 'getCachedSession',\n          value: function getCachedSession() {\n            if (!this.username) {\n              return new _CognitoAuthSession2.default();\n            }\n\n            var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId() + '.' + this.username;\n            var idTokenKey = keyPrefix + '.idToken';\n            var accessTokenKey = keyPrefix + '.accessToken';\n            var refreshTokenKey = keyPrefix + '.refreshToken';\n            var scopeKey = keyPrefix + '.tokenScopesString';\n            var scopesString = this.storage.getItem(scopeKey);\n            var scopesArray = [];\n\n            if (scopesString) {\n              scopesArray = scopesString.split(' ');\n            }\n\n            var tokenScopes = new _CognitoTokenScopes2.default(scopesArray);\n            var idToken = new _CognitoIdToken2.default(this.storage.getItem(idTokenKey));\n            var accessToken = new _CognitoAccessToken2.default(this.storage.getItem(accessTokenKey));\n            var refreshToken = new _CognitoRefreshToken2.default(this.storage.getItem(refreshTokenKey));\n            var sessionData = {\n              IdToken: idToken,\n              AccessToken: accessToken,\n              RefreshToken: refreshToken,\n              TokenScopes: tokenScopes\n            };\n            var cachedSession = new _CognitoAuthSession2.default(sessionData);\n            return cachedSession;\n          }\n          /**\n           * This is used to get last signed in user from local storage\n           * @returns {string} the last user name\n           */\n\n        }, {\n          key: 'getLastUser',\n          value: function getLastUser() {\n            var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n            var lastUserKey = keyPrefix + '.LastAuthUser';\n            var lastUserName = this.storage.getItem(lastUserKey);\n\n            if (lastUserName) {\n              return lastUserName;\n            }\n\n            return undefined;\n          }\n          /**\n           * This is used to save the session tokens and scopes to local storage\n           * Input parameter is a set of strings.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'cacheTokensScopes',\n          value: function cacheTokensScopes() {\n            var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n            var tokenUserName = this.signInUserSession.getAccessToken().getUsername();\n            this.username = tokenUserName;\n            var idTokenKey = keyPrefix + '.' + tokenUserName + '.idToken';\n            var accessTokenKey = keyPrefix + '.' + tokenUserName + '.accessToken';\n            var refreshTokenKey = keyPrefix + '.' + tokenUserName + '.refreshToken';\n            var lastUserKey = keyPrefix + '.LastAuthUser';\n            var scopeKey = keyPrefix + '.' + tokenUserName + '.tokenScopesString';\n            var scopesArray = this.signInUserSession.getTokenScopes().getScopes();\n            var scopesString = scopesArray.join(' ');\n            this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n            this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n            this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n            this.storage.setItem(lastUserKey, tokenUserName);\n            this.storage.setItem(scopeKey, scopesString);\n          }\n          /**\n           * Compare two sets if they are identical.\n           * @param {set} set1 one set\n           * @param {set} set2 the other set\n           * @returns {boolean} boolean value is true if two sets are identical\n           */\n\n        }, {\n          key: 'compareSets',\n          value: function compareSets(set1, set2) {\n            if (set1.size !== set2.size) {\n              return false;\n            }\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = set1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var item = _step.value;\n\n                if (!set2.has(item)) {\n                  return false;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            return true;\n          }\n          /**\n           * @param {string} url the url string\n           * Get the hostname from url.\n           * @returns {string} hostname string\n           */\n\n        }, {\n          key: 'getHostName',\n          value: function getHostName(url) {\n            var match = url.match(this.getCognitoConstants().HOSTNAMEREGEX);\n\n            if (match != null && match.length > 2 && _typeof(match[2]) === this.getCognitoConstants().STRINGTYPE && match[2].length > 0) {\n              return match[2];\n            }\n\n            return undefined;\n          }\n          /**\n           * Get http query parameters and return them as a map.\n           * @param {string} url the url string\n           * @param {string} splitMark query parameters split mark (prefix)\n           * @returns {map} map\n           */\n\n        }, {\n          key: 'getQueryParameters',\n          value: function getQueryParameters(url, splitMark) {\n            var str = String(url).split(splitMark);\n            var url2 = str[1];\n            var str1 = String(url2).split(this.getCognitoConstants().AMPERSAND);\n            var num = str1.length;\n            var map = new Map();\n            var i = void 0;\n\n            for (i = 0; i < num; i++) {\n              str1[i] = String(str1[i]).split(this.getCognitoConstants().QUERYPARAMETERREGEX2);\n              map.set(str1[i][0], str1[i][1]);\n            }\n\n            return map;\n          }\n          /**\n           * helper function to generate a random string\n           * @param {int} length the length of string\n           * @param {string} chars a original string\n           * @returns {string} a random value.\n           */\n\n        }, {\n          key: 'generateRandomString',\n          value: function generateRandomString(length, chars) {\n            var result = '';\n            var i = length;\n\n            for (; i > 0; --i) {\n              result += chars[Math.round(Math.random() * (chars.length - 1))];\n            }\n\n            return result;\n          }\n          /**\n           * This is used to clear the session tokens and scopes from local storage\n           * @returns {void}\n           */\n\n        }, {\n          key: 'clearCachedTokensScopes',\n          value: function clearCachedTokensScopes() {\n            var keyPrefix = 'CognitoIdentityServiceProvider.' + this.getClientId();\n            var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n            var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n            var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n            var lastUserKey = keyPrefix + '.LastAuthUser';\n            var scopeKey = keyPrefix + '.' + this.username + '.tokenScopesString';\n            this.storage.removeItem(idTokenKey);\n            this.storage.removeItem(accessTokenKey);\n            this.storage.removeItem(refreshTokenKey);\n            this.storage.removeItem(lastUserKey);\n            this.storage.removeItem(scopeKey);\n          }\n          /**\n           * This is used to build a user session from tokens retrieved in the authentication result\n           * @param {object} refreshToken authResult Successful auth response from server.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'refreshSession',\n          value: function refreshSession(refreshToken) {\n            // https POST call for refreshing token\n            var url = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_TOKEN);\n            var header = this.getCognitoConstants().HEADER;\n            var body = {\n              grant_type: this.getCognitoConstants().REFRESHTOKEN,\n              client_id: this.getClientId(),\n              redirect_uri: this.RedirectUriSignIn,\n              refresh_token: refreshToken\n            };\n            var boundOnSuccess = this.onSuccessRefreshToken.bind(this);\n            var boundOnFailure = this.onFailure.bind(this);\n            this.makePOSTRequest(header, body, url, boundOnSuccess, boundOnFailure);\n          }\n          /**\n           * Make the http POST request.\n           * @param {JSON} header header JSON object\n           * @param {JSON} body body JSON object\n           * @param {string} url string\n           * @param {function} onSuccess callback\n           * @param {function} onFailure callback\n           * @returns {void}\n           */\n\n        }, {\n          key: 'makePOSTRequest',\n          value: function makePOSTRequest(header, body, url, onSuccess, onFailure) {\n            // This is a sample server that supports CORS.\n            var xhr = this.createCORSRequest(this.getCognitoConstants().POST, url);\n            var bodyString = '';\n\n            if (!xhr) {\n              return;\n            } // set header\n\n\n            for (var key in header) {\n              xhr.setRequestHeader(key, header[key]);\n            }\n\n            for (var _key in body) {\n              bodyString = bodyString.concat(_key, this.getCognitoConstants().EQUALSIGN, body[_key], this.getCognitoConstants().AMPERSAND);\n            }\n\n            bodyString = bodyString.substring(0, bodyString.length - 1);\n            xhr.send(bodyString);\n\n            xhr.onreadystatechange = function addressState() {\n              if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                  onSuccess(xhr.responseText);\n                } else {\n                  onFailure(xhr.responseText);\n                }\n              }\n            };\n          }\n          /**\n           * Create the XHR object\n           * @param {string} method which method to call\n           * @param {string} url the url string\n           * @returns {object} xhr\n           */\n\n        }, {\n          key: 'createCORSRequest',\n          value: function createCORSRequest(method, url) {\n            var xhr = new XMLHttpRequest();\n\n            if (this.getCognitoConstants().WITHCREDENTIALS in xhr) {\n              // XHR for Chrome/Firefox/Opera/Safari.\n              xhr.open(method, url, true);\n            } else if ((typeof XDomainRequest === 'undefined' ? 'undefined' : _typeof(XDomainRequest)) !== this.getCognitoConstants().UNDEFINED) {\n              // XDomainRequest for IE.\n              xhr = new XDomainRequest();\n              xhr.open(method, url);\n            } else {\n              // CORS not supported.\n              xhr = null;\n            }\n\n            return xhr;\n          }\n          /**\n           * The http POST request onFailure callback.\n           * @param {object} err the error object\n           * @returns {function} onFailure\n           */\n\n        }, {\n          key: 'onFailure',\n          value: function onFailure(err) {\n            this.userhandler.onFailure(err);\n          }\n          /**\n           * The http POST request onSuccess callback when refreshing tokens.\n           * @param {JSON} jsonData tokens\n           */\n\n        }, {\n          key: 'onSuccessRefreshToken',\n          value: function onSuccessRefreshToken(jsonData) {\n            var jsonDataObject = JSON.parse(jsonData);\n\n            if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n              var URL = this.getFQDNSignIn();\n              this.launchUri(URL);\n            } else {\n              if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n                this.signInUserSession.setIdToken(new _CognitoIdToken2.default(jsonDataObject.id_token));\n              }\n\n              if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n                this.signInUserSession.setAccessToken(new _CognitoAccessToken2.default(jsonDataObject.access_token));\n              }\n\n              this.cacheTokensScopes();\n              this.userhandler.onSuccess(this.signInUserSession);\n            }\n          }\n          /**\n           * The http POST request onSuccess callback when exchanging code for tokens.\n           * @param {JSON} jsonData tokens\n           */\n\n        }, {\n          key: 'onSuccessExchangeForToken',\n          value: function onSuccessExchangeForToken(jsonData) {\n            var jsonDataObject = JSON.parse(jsonData);\n            var refreshToken = new _CognitoRefreshToken2.default();\n            var accessToken = new _CognitoAccessToken2.default();\n            var idToken = new _CognitoIdToken2.default();\n            var state = null;\n\n            if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ERROR)) {\n              return this.userhandler.onFailure(jsonData);\n            }\n\n            if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().IDTOKEN)) {\n              this.signInUserSession.setIdToken(new _CognitoIdToken2.default(jsonDataObject.id_token));\n            } else {\n              this.signInUserSession.setIdToken(idToken);\n            }\n\n            if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().ACCESSTOKEN)) {\n              this.signInUserSession.setAccessToken(new _CognitoAccessToken2.default(jsonDataObject.access_token));\n            } else {\n              this.signInUserSession.setAccessToken(accessToken);\n            }\n\n            if (Object.prototype.hasOwnProperty.call(jsonDataObject, this.getCognitoConstants().REFRESHTOKEN)) {\n              this.signInUserSession.setRefreshToken(new _CognitoRefreshToken2.default(jsonDataObject.refresh_token));\n            } else {\n              this.signInUserSession.setRefreshToken(refreshToken);\n            }\n\n            this.cacheTokensScopes();\n            this.userhandler.onSuccess(this.signInUserSession);\n          }\n          /**\n           * Launch Cognito Auth UI page.\n           * @param {string} URL the url to launch\n           * @returns {void}\n           */\n\n        }, {\n          key: 'launchUri',\n          value: function launchUri() {}\n        }, {\n          key: 'getSpaceSeperatedScopeString',\n          // overwritten in constructor\n\n          /**\n           * @returns {string} scopes string\n           */\n          value: function getSpaceSeperatedScopeString() {\n            var tokenScopesString = this.signInUserSession.getTokenScopes().getScopes();\n            tokenScopesString = tokenScopesString.join(this.getCognitoConstants().SPACE);\n            return encodeURIComponent(tokenScopesString);\n          }\n          /**\n           * Create the FQDN(fully qualified domain name) for authorization endpoint.\n           * @returns {string} url\n           */\n\n        }, {\n          key: 'getFQDNSignIn',\n          value: function getFQDNSignIn() {\n            if (this.state == null) {\n              this.state = this.generateRandomString(this.getCognitoConstants().STATELENGTH, this.getCognitoConstants().STATEORIGINSTRING);\n            }\n\n            var identityProviderParam = this.IdentityProvider ? this.getCognitoConstants().AMPERSAND.concat(this.getCognitoConstants().DOMAIN_QUERY_PARAM_IDENTITY_PROVIDER, this.getCognitoConstants().EQUALSIGN, this.IdentityProvider) : '';\n            var tokenScopesString = this.getSpaceSeperatedScopeString();\n            var userContextDataParam = '';\n            var userContextData = this.getUserContextData();\n\n            if (userContextData) {\n              userContextDataParam = this.getCognitoConstants().AMPERSAND + this.getCognitoConstants().DOMAIN_QUERY_PARAM_USERCONTEXTDATA + this.getCognitoConstants().EQUALSIGN + this.getUserContextData();\n            } // Build the complete web domain to launch the login screen\n\n\n            var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNIN, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_REDIRECT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignIn), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().DOMAIN_QUERY_PARAM_RESPONSE_TYPE, this.getCognitoConstants().EQUALSIGN, this.responseType, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId(), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().STATE, this.getCognitoConstants().EQUALSIGN, this.state, this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().SCOPE, this.getCognitoConstants().EQUALSIGN, tokenScopesString, identityProviderParam, userContextDataParam);\n            return uri;\n          }\n          /**\n           * Sign out the user.\n           * @returns {void}\n           */\n\n        }, {\n          key: 'signOut',\n          value: function signOut() {\n            var URL = this.getFQDNSignOut();\n            this.signInUserSession = null;\n            this.clearCachedTokensScopes();\n            this.launchUri(URL);\n          }\n          /**\n           * Create the FQDN(fully qualified domain name) for signout endpoint.\n           * @returns {string} url\n           */\n\n        }, {\n          key: 'getFQDNSignOut',\n          value: function getFQDNSignOut() {\n            var uri = this.getCognitoConstants().DOMAIN_SCHEME.concat(this.getCognitoConstants().COLONDOUBLESLASH, this.getAppWebDomain(), this.getCognitoConstants().SLASH, this.getCognitoConstants().DOMAIN_PATH_SIGNOUT, this.getCognitoConstants().QUESTIONMARK, this.getCognitoConstants().DOMAIN_QUERY_PARAM_SIGNOUT_URI, this.getCognitoConstants().EQUALSIGN, encodeURIComponent(this.RedirectUriSignOut), this.getCognitoConstants().AMPERSAND, this.getCognitoConstants().CLIENT_ID, this.getCognitoConstants().EQUALSIGN, this.getClientId());\n            return uri;\n          }\n          /**\n           * This method returns the encoded data string used for cognito advanced security feature.\n           * This would be generated only when developer has included the JS used for collecting the\n           * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n           * features\n           **/\n\n        }, {\n          key: 'getUserContextData',\n          value: function getUserContextData() {\n            if (typeof AmazonCognitoAdvancedSecurityData === \"undefined\") {\n              return;\n            }\n\n            var _username = \"\";\n\n            if (this.username) {\n              _username = this.username;\n            }\n\n            var _userpoolId = \"\";\n\n            if (this.userpoolId) {\n              _userpoolId = this.userpoolId;\n            }\n\n            if (this.advancedSecurityDataCollectionFlag) {\n              return AmazonCognitoAdvancedSecurityData.getData(_username, _userpoolId, this.clientId);\n            }\n          }\n          /**\n           * Helper method to let the user know if he has either a valid cached session \n           * or a valid authenticated session from the app integration callback.\n           * @returns {boolean} userSignedIn \n           */\n\n        }, {\n          key: 'isUserSignedIn',\n          value: function isUserSignedIn() {\n            return this.signInUserSession != null && this.signInUserSession.isValid() || this.getCachedSession() != null && this.getCachedSession().isValid();\n          }\n        }]);\n\n        return CognitoAuth;\n      }();\n\n      exports.default = CognitoAuth;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _jsCookie = __webpack_require__(13);\n\n      var Cookies = _interopRequireWildcard(_jsCookie);\n\n      function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n          return obj;\n        } else {\n          var newObj = {};\n\n          if (obj != null) {\n            for (var key in obj) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n          }\n\n          newObj.default = obj;\n          return newObj;\n        }\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /** @class */\n\n\n      var CookieStorage = function () {\n        /**\n         * Constructs a new CookieStorage object\n         * @param {object} data Creation options.\n         * @param {string} data.domain Cookies domain (mandatory).\n         * @param {string} data.path Cookies path (default: '/')\n         * @param {integer} data.expires Cookie expiration (in days, default: 365)\n         * @param {boolean} data.secure Cookie secure flag (default: true)\n         */\n        function CookieStorage(data) {\n          _classCallCheck(this, CookieStorage);\n\n          this.domain = data.domain;\n\n          if (data.path) {\n            this.path = data.path;\n          } else {\n            this.path = '/';\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'expires')) {\n            this.expires = data.expires;\n          } else {\n            this.expires = 365;\n          }\n\n          if (Object.prototype.hasOwnProperty.call(data, 'secure')) {\n            this.secure = data.secure;\n          } else {\n            this.secure = true;\n          }\n        }\n        /**\n         * This is used to set a specific item in storage\n         * @param {string} key - the key for the item\n         * @param {object} value - the value\n         * @returns {string} value that was set\n         */\n\n\n        _createClass(CookieStorage, [{\n          key: 'setItem',\n          value: function setItem(key, value) {\n            Cookies.set(key, value, {\n              path: this.path,\n              expires: this.expires,\n              domain: this.domain,\n              secure: this.secure\n            });\n            return Cookies.get(key);\n          }\n          /**\n           * This is used to get a specific key from storage\n           * @param {string} key - the key for the item\n           * This is used to clear the storage\n           * @returns {string} the data item\n           */\n\n        }, {\n          key: 'getItem',\n          value: function getItem(key) {\n            return Cookies.get(key);\n          }\n          /**\n           * This is used to remove an item from storage\n           * @param {string} key - the key being set\n           * @returns {string} value - value that was deleted\n           */\n\n        }, {\n          key: 'removeItem',\n          value: function removeItem(key) {\n            return Cookies.remove(key, {\n              path: this.path,\n              domain: this.domain,\n              secure: this.secure\n            });\n          }\n          /**\n           * This is used to clear the storage\n           * @returns {string} nothing\n           */\n\n        }, {\n          key: 'clear',\n          value: function clear() {\n            var cookies = Cookies.get();\n            var index = void 0;\n\n            for (index = 0; index < cookies.length; ++index) {\n              Cookies.remove(cookies[index]);\n            }\n\n            return {};\n          }\n        }]);\n\n        return CookieStorage;\n      }();\n\n      exports.default = CookieStorage;\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /*!\n       * Amazon Cognito Auth SDK for JavaScript\n       * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n      \t * Licensed under the Apache License, Version 2.0 (the \"License\").\n       * You may not use this file except in compliance with the License.\n       * A copy of the License is located at\n       *\n       *         http://aws.amazon.com/apache2.0/\n       *\n       * or in the \"license\" file accompanying this file.\n       * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n       * OR CONDITIONS OF ANY KIND, either express or implied. See the\n       * License for the specific language governing permissions\n       * and limitations under the License.\n       */\n\n\n      var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      var weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      /** @class */\n\n      var DateHelper = function () {\n        function DateHelper() {\n          _classCallCheck(this, DateHelper);\n        }\n\n        _createClass(DateHelper, [{\n          key: 'getNowString',\n\n          /**\n           * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n           */\n          value: function getNowString() {\n            var now = new Date();\n            var weekDay = weekNames[now.getUTCDay()];\n            var month = monthNames[now.getUTCMonth()];\n            var day = now.getUTCDate();\n            var hours = now.getUTCHours();\n\n            if (hours < 10) {\n              hours = '0' + hours;\n            }\n\n            var minutes = now.getUTCMinutes();\n\n            if (minutes < 10) {\n              minutes = '0' + minutes;\n            }\n\n            var seconds = now.getUTCSeconds();\n\n            if (seconds < 10) {\n              seconds = '0' + seconds;\n            }\n\n            var year = now.getUTCFullYear(); // ddd MMM D HH:mm:ss UTC YYYY\n\n            var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n            return dateNow;\n          }\n        }]);\n\n        return DateHelper;\n      }();\n\n      exports.default = DateHelper;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var SELF = '_self';\n\n      var launchUri = exports.launchUri = function launchUri(url) {\n        return window.open(url, SELF);\n      };\n      /***/\n\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _CognitoAccessToken = __webpack_require__(1);\n\n      Object.defineProperty(exports, 'CognitoAccessToken', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_CognitoAccessToken).default;\n        }\n      });\n\n      var _CognitoIdToken = __webpack_require__(2);\n\n      Object.defineProperty(exports, 'CognitoIdToken', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_CognitoIdToken).default;\n        }\n      });\n\n      var _CognitoRefreshToken = __webpack_require__(3);\n\n      Object.defineProperty(exports, 'CognitoRefreshToken', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_CognitoRefreshToken).default;\n        }\n      });\n\n      var _CognitoTokenScopes = __webpack_require__(4);\n\n      Object.defineProperty(exports, 'CognitoTokenScopes', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_CognitoTokenScopes).default;\n        }\n      });\n\n      var _CognitoAuth = __webpack_require__(8);\n\n      Object.defineProperty(exports, 'CognitoAuth', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_CognitoAuth).default;\n        }\n      });\n\n      var _CognitoAuthSession = __webpack_require__(5);\n\n      Object.defineProperty(exports, 'CognitoAuthSession', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_CognitoAuthSession).default;\n        }\n      });\n\n      var _DateHelper = __webpack_require__(10);\n\n      Object.defineProperty(exports, 'DateHelper', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_DateHelper).default;\n        }\n      });\n\n      var _StorageHelper = __webpack_require__(7);\n\n      Object.defineProperty(exports, 'StorageHelper', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_StorageHelper).default;\n        }\n      });\n\n      var _CookieStorage = __webpack_require__(9);\n\n      Object.defineProperty(exports, 'CookieStorage', {\n        enumerable: true,\n        get: function get() {\n          return _interopRequireDefault(_CookieStorage).default;\n        }\n      });\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n      /***/\n\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\n      /*!\n      * JavaScript Cookie v2.2.0\n      * https://github.com/js-cookie/js-cookie\n      *\n      * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n      * Released under the MIT license\n      */\n\n\n      ;\n\n      (function (factory) {\n        var registeredInModuleLoader = false;\n\n        if (true) {\n          !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n          registeredInModuleLoader = true;\n        }\n\n        if (true) {\n          module.exports = factory();\n          registeredInModuleLoader = true;\n        }\n\n        if (!registeredInModuleLoader) {\n          var OldCookies = window.Cookies;\n          var api = window.Cookies = factory();\n\n          api.noConflict = function () {\n            window.Cookies = OldCookies;\n            return api;\n          };\n        }\n      })(function () {\n        function extend() {\n          var i = 0;\n          var result = {};\n\n          for (; i < arguments.length; i++) {\n            var attributes = arguments[i];\n\n            for (var key in attributes) {\n              result[key] = attributes[key];\n            }\n          }\n\n          return result;\n        }\n\n        function init(converter) {\n          function api(key, value, attributes) {\n            var result;\n\n            if (typeof document === 'undefined') {\n              return;\n            } // Write\n\n\n            if (arguments.length > 1) {\n              attributes = extend({\n                path: '/'\n              }, api.defaults, attributes);\n\n              if (typeof attributes.expires === 'number') {\n                var expires = new Date();\n                expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);\n                attributes.expires = expires;\n              } // We're using \"expires\" because \"max-age\" is not supported by IE\n\n\n              attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\n\n              try {\n                result = JSON.stringify(value);\n\n                if (/^[\\{\\[]/.test(result)) {\n                  value = result;\n                }\n              } catch (e) {}\n\n              if (!converter.write) {\n                value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n              } else {\n                value = converter.write(value, key);\n              }\n\n              key = encodeURIComponent(String(key));\n              key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);\n              key = key.replace(/[\\(\\)]/g, escape);\n              var stringifiedAttributes = '';\n\n              for (var attributeName in attributes) {\n                if (!attributes[attributeName]) {\n                  continue;\n                }\n\n                stringifiedAttributes += '; ' + attributeName;\n\n                if (attributes[attributeName] === true) {\n                  continue;\n                }\n\n                stringifiedAttributes += '=' + attributes[attributeName];\n              }\n\n              return document.cookie = key + '=' + value + stringifiedAttributes;\n            } // Read\n\n\n            if (!key) {\n              result = {};\n            } // To prevent the for loop in the first place assign an empty array\n            // in case there are no cookies at all. Also prevents odd result when\n            // calling \"get()\"\n\n\n            var cookies = document.cookie ? document.cookie.split('; ') : [];\n            var rdecode = /(%[0-9A-Z]{2})+/g;\n            var i = 0;\n\n            for (; i < cookies.length; i++) {\n              var parts = cookies[i].split('=');\n              var cookie = parts.slice(1).join('=');\n\n              if (!this.json && cookie.charAt(0) === '\"') {\n                cookie = cookie.slice(1, -1);\n              }\n\n              try {\n                var name = parts[0].replace(rdecode, decodeURIComponent);\n                cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);\n\n                if (this.json) {\n                  try {\n                    cookie = JSON.parse(cookie);\n                  } catch (e) {}\n                }\n\n                if (key === name) {\n                  result = cookie;\n                  break;\n                }\n\n                if (!key) {\n                  result[name] = cookie;\n                }\n              } catch (e) {}\n            }\n\n            return result;\n          }\n\n          api.set = api;\n\n          api.get = function (key) {\n            return api.call(api, key);\n          };\n\n          api.getJSON = function () {\n            return api.apply({\n              json: true\n            }, [].slice.call(arguments));\n          };\n\n          api.defaults = {};\n\n          api.remove = function (key, attributes) {\n            api(key, '', extend(attributes, {\n              expires: -1\n            }));\n          };\n\n          api.withConverter = init;\n          return api;\n        }\n\n        return init(function () {});\n      });\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}