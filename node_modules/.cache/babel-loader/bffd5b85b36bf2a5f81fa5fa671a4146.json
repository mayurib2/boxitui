{"ast":null,"code":"import { CLEAR_SESSION, SET_SESSION } from '../constants/actionTypes';\nimport cognitoUtils from '../lib/cognitoUtils';\nexport const clearSession = () => ({\n  type: CLEAR_SESSION\n}); // Initialise the Cognito sesson from a callback href\n\nexport function initSessionFromCallbackURI(callbackHref) {\n  return function (dispatch) {\n    return cognitoUtils.parseCognitoWebResponse(callbackHref) // parse the callback URL\n    .then(() => cognitoUtils.getCognitoSession()) // get a new session\n    .then(session => {\n      dispatch({\n        type: SET_SESSION,\n        session\n      });\n    });\n  };\n}\nexport const setSession = session => ({\n  type: SET_SESSION,\n  session\n});","map":{"version":3,"sources":["/Users/rkarnik/Documents/personal/mayuri_code/breakless-react/src/actions/session.js"],"names":["CLEAR_SESSION","SET_SESSION","cognitoUtils","clearSession","type","initSessionFromCallbackURI","callbackHref","dispatch","parseCognitoWebResponse","then","getCognitoSession","session","setSession"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,0BAA3C;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,OAAO;AACjCC,EAAAA,IAAI,EAAEJ;AAD2B,CAAP,CAArB,C,CAIP;;AACA,OAAO,SAASK,0BAAT,CAAqCC,YAArC,EAAmD;AACxD,SAAO,UAAUC,QAAV,EAAoB;AACzB,WAAOL,YAAY,CAACM,uBAAb,CAAqCF,YAArC,EAAmD;AAAnD,KACJG,IADI,CACC,MAAMP,YAAY,CAACQ,iBAAb,EADP,EACyC;AADzC,KAEJD,IAFI,CAEEE,OAAD,IAAa;AACjBJ,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAEH,WAAR;AAAqBU,QAAAA;AAArB,OAAD,CAAR;AACD,KAJI,CAAP;AAKD,GAND;AAOD;AAED,OAAO,MAAMC,UAAU,GAAGD,OAAO,KAAK;AACpCP,EAAAA,IAAI,EAAEH,WAD8B;AAEpCU,EAAAA;AAFoC,CAAL,CAA1B","sourcesContent":["import { CLEAR_SESSION, SET_SESSION } from '../constants/actionTypes'\nimport cognitoUtils from '../lib/cognitoUtils'\n\nexport const clearSession = () => ({\n  type: CLEAR_SESSION\n})\n\n// Initialise the Cognito sesson from a callback href\nexport function initSessionFromCallbackURI (callbackHref) {\n  return function (dispatch) {\n    return cognitoUtils.parseCognitoWebResponse(callbackHref) // parse the callback URL\n      .then(() => cognitoUtils.getCognitoSession()) // get a new session\n      .then((session) => {\n        dispatch({ type: SET_SESSION, session })\n      })\n  }\n}\n\nexport const setSession = session => ({\n  type: SET_SESSION,\n  session\n})\n"]},"metadata":{},"sourceType":"module"}