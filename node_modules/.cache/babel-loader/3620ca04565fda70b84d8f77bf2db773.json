{"ast":null,"code":"var _jsxFileName = \"/Users/rkarnik/Documents/personal/mayuri_code/breakless-react/src/routes/Callback.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { initSessionFromCallbackURI } from '../actions/session';\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.session\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    initSessionFromCallbackURI: href => dispatch(initSessionFromCallbackURI(href))\n  };\n}\n/**\n  Callback route used after a successful Cognito sign-in. The window URL will contain the code we can\n  use to get a Cognito session, which includes JWT tokens etc\n */\n\n\nclass Callback extends Component {\n  // If a Cognito auth code is in the URL (could be a hash or query component), init the new session\n  componentDidMount() {\n    if (this.props.location.hash || this.props.location.search) {\n      console.log(\"Callback componentDidMount this.props.location \", this.props);\n      this.props.initSessionFromCallbackURI(window.location.href);\n    }\n  }\n\n  render() {\n    // If there's no auth code in the URL or we're now logged into, redirect to the root page\n    if (!this.props.location.hash && !this.props.location.search || this.props.session.isLoggedIn) {\n      return React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Callback);","map":{"version":3,"sources":["/Users/rkarnik/Documents/personal/mayuri_code/breakless-react/src/routes/Callback.js"],"names":["React","Component","Redirect","connect","initSessionFromCallbackURI","mapStateToProps","state","session","mapDispatchToProps","dispatch","href","Callback","componentDidMount","props","location","hash","search","console","log","window","render","isLoggedIn"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,0BAAT,QAA2C,oBAA3C;;AAEA,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SAAO;AAAEC,IAAAA,OAAO,EAAED,KAAK,CAACC;AAAjB,GAAP;AACD;;AACD,SAASC,kBAAT,CAA6BC,QAA7B,EAAuC;AACrC,SAAO;AACLL,IAAAA,0BAA0B,EAAEM,IAAI,IAAID,QAAQ,CAACL,0BAA0B,CAACM,IAAD,CAA3B;AADvC,GAAP;AAGD;AAED;;;;;;AAIA,MAAMC,QAAN,SAAuBV,SAAvB,CAAiC;AAC/B;AACAW,EAAAA,iBAAiB,GAAI;AACnB,QAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,IAApB,IAA4B,KAAKF,KAAL,CAAWC,QAAX,CAAoBE,MAApD,EAA4D;AAC1DC,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA8D,KAAKL,KAAnE;AACA,WAAKA,KAAL,CAAWT,0BAAX,CAAsCe,MAAM,CAACL,QAAP,CAAgBJ,IAAtD;AACD;AACF;;AAEDU,EAAAA,MAAM,GAAI;AACR;AACA,QAAK,CAAC,KAAKP,KAAL,CAAWC,QAAX,CAAoBC,IAArB,IAA6B,CAAC,KAAKF,KAAL,CAAWC,QAAX,CAAoBE,MAAnD,IAA8D,KAAKH,KAAL,CAAWN,OAAX,CAAmBc,UAArF,EAAiG;AAC/F,aAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAhB8B;;AAmBjC,eAAelB,OAAO,CAACE,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CG,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { initSessionFromCallbackURI } from '../actions/session'\n\nfunction mapStateToProps (state) {\n  return { session: state.session }\n}\nfunction mapDispatchToProps (dispatch) {\n  return {\n    initSessionFromCallbackURI: href => dispatch(initSessionFromCallbackURI(href))\n  }\n}\n\n/**\n  Callback route used after a successful Cognito sign-in. The window URL will contain the code we can\n  use to get a Cognito session, which includes JWT tokens etc\n */\nclass Callback extends Component {\n  // If a Cognito auth code is in the URL (could be a hash or query component), init the new session\n  componentDidMount () {\n    if (this.props.location.hash || this.props.location.search) {\n      console.log(\"Callback componentDidMount this.props.location \",this.props);\n      this.props.initSessionFromCallbackURI(window.location.href)\n    }\n  }\n\n  render () {\n    // If there's no auth code in the URL or we're now logged into, redirect to the root page\n    if ((!this.props.location.hash && !this.props.location.search) || this.props.session.isLoggedIn) {\n      return <Redirect to=\"/\" />\n    }\n\n    return <div />\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Callback)\n"]},"metadata":{},"sourceType":"module"}